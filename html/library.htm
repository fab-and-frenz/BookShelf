<html>
    <head>
        <title>BookShelf: Library</title>
        <link rel="stylesheet" type="text/css" href="html/css/common.css" />
    </head>

    <body>
        <h1><em>BookShelf</em></h1>
        <ul>
            <li><a href="/library">Library</a></li>
            <li><a href="/settings">Settings</a></li>
        </ul>
        <br />
        <input type="text" placeholder="Search..">
        
        <!--
        <div class="dropdown">
            <button class="dropbtn">View:</button>
            <div class="dropdown-content">
                <a href="">GRID</a>
                <a href="">LIST</a>
            </div>
        </div>
        -->
        
        <table id="books">
            <tr>
                <th>Title</th>
                <th>Author</th>
                <th>Download</th>
            </tr>

            {{if .}}
                {{range .}}
                    <tr>
                        <td><a href="/read?id={{.Id}}&type={{.Type}}">{{.Title}}</a></td>
                        <td><a>{{.Author}}</a></td>
                        <td><a href="/download?id={{.Id}}" download="{{.Filename}}">Download</a></td>
                    </tr>
                {{end}}
            {{end}}
        </table>

        <label for="filechooser" id="filechooserbtn">Choose File(s)</label>
        <input id="filechooser" type="file" multiple onchange="handleFiles(files)"/>
        <style>
            #filechooser {
                width: 0.1px;
                height: 0.1px;
                opacity: 0;
                overflow: hidden;
                position: absolute;
                z-index: -1;
            }

            #filechooserbtn {
                font-size: 1.25em;
                font-weight: 700;
                color: white;
                background-color: black;
                display: inline-block;
            }

            #filechooserbtn:hover {
                background-color: red;
                cursor: pointer;
            }
        </style>
        <script>
            function handleFiles(files) {
                for (var i = 0; i < files.length; i++) {
                    readFile(files[i]).then((val) => {
                        var req = new XMLHttpRequest();
                        req.open("POST", "/uploadbook", true);

                        req.onload = () => {
                            console.log("res");
                        };

                        req.send(JSON.stringify(val));
                    });
                }
            }

            function readFile(file) {
                return new Promise((resolve, reject) => {
                    let reader = new FileReader();

                    reader.onload = () => {
                        resolve({
                            filename: file.name,
                            data: window.btoa(encode_utf8(reader.result))
                        });
                    };

                    reader.error = () => {
                        reject(reader.error);
                    };

                    reader.readAsText(file);
                });
            }

            function encode_utf8(s) {
              return unescape(encodeURIComponent(s));
            }

            function decode_utf8(s) {
              return decodeURIComponent(escape(s));
            }
        </script>
    </body>
</html>
